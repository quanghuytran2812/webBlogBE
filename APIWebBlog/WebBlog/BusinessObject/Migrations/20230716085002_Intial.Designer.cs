// <auto-generated />
using System;
using BusinessObject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230716085002_Intial")]
    partial class Intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Models.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("category_id"), 1L, 1);

                    b.Property<string>("categoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("published")
                        .HasColumnType("int");

                    b.HasKey("category_id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            category_id = 1,
                            categoryName = "Digital Marketing",
                            published = 1
                        },
                        new
                        {
                            category_id = 2,
                            categoryName = "SEO",
                            published = 1
                        },
                        new
                        {
                            category_id = 3,
                            categoryName = "Web Design",
                            published = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Post_Comment", b =>
                {
                    b.Property<int>("postCo_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postCo_id"), 1L, 1);

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("published")
                        .HasColumnType("int");

                    b.HasKey("postCo_id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post_Comments");
                });

            modelBuilder.Entity("BusinessObject.Models.Post_Like", b =>
                {
                    b.Property<int>("postL_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postL_id"), 1L, 1);

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_time")
                        .HasColumnType("datetime2");

                    b.HasKey("postL_id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post_Likes");
                });

            modelBuilder.Entity("BusinessObject.Models.Posts", b =>
                {
                    b.Property<int>("post_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("post_id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TabId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("published")
                        .HasColumnType("int");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("post_id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TabId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BusinessObject.Models.Role", b =>
                {
                    b.Property<int>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_id"), 1L, 1);

                    b.Property<string>("roleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("role_id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            role_id = 1,
                            roleName = "Admin"
                        },
                        new
                        {
                            role_id = 2,
                            roleName = "Blogger"
                        },
                        new
                        {
                            role_id = 3,
                            roleName = "User"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Tab", b =>
                {
                    b.Property<int>("tab_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tab_id"), 1L, 1);

                    b.Property<int>("published")
                        .HasColumnType("int");

                    b.Property<string>("tabName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tab_id");

                    b.ToTable("Tabs");

                    b.HasData(
                        new
                        {
                            tab_id = 1,
                            published = 1,
                            tabName = "Social Media Marketing"
                        },
                        new
                        {
                            tab_id = 2,
                            published = 1,
                            tabName = "Video Marketing"
                        },
                        new
                        {
                            tab_id = 3,
                            published = 1,
                            tabName = "Content Marketing"
                        },
                        new
                        {
                            tab_id = 4,
                            published = 1,
                            tabName = "Local SEO"
                        },
                        new
                        {
                            tab_id = 5,
                            published = 1,
                            tabName = "User Experience"
                        },
                        new
                        {
                            tab_id = 6,
                            published = 1,
                            tabName = "SEO Basics"
                        },
                        new
                        {
                            tab_id = 7,
                            published = 1,
                            tabName = "Web Development"
                        },
                        new
                        {
                            tab_id = 8,
                            published = 1,
                            tabName = "Webpage Design"
                        },
                        new
                        {
                            tab_id = 9,
                            published = 1,
                            tabName = "WordPress Website"
                        });
                });

            modelBuilder.Entity("BusinessObject.Models.Users", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("active")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("email_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("salt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessObject.Models.Post_Comment", b =>
                {
                    b.HasOne("BusinessObject.Models.Posts", "Posts")
                        .WithMany("Post_Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Users", "Users")
                        .WithMany("Post_Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Posts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObject.Models.Post_Like", b =>
                {
                    b.HasOne("BusinessObject.Models.Posts", "Posts")
                        .WithMany("Post_Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Users", "Users")
                        .WithMany("Post_Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Posts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObject.Models.Posts", b =>
                {
                    b.HasOne("BusinessObject.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BusinessObject.Models.Tab", "Tab")
                        .WithMany("Posts")
                        .HasForeignKey("TabId");

                    b.HasOne("BusinessObject.Models.Users", "Users")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tab");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObject.Models.Users", b =>
                {
                    b.HasOne("BusinessObject.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BusinessObject.Models.Posts", b =>
                {
                    b.Navigation("Post_Comments");

                    b.Navigation("Post_Likes");
                });

            modelBuilder.Entity("BusinessObject.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObject.Models.Tab", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BusinessObject.Models.Users", b =>
                {
                    b.Navigation("Post_Comments");

                    b.Navigation("Post_Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
